/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __PredictedObject_hpp__
#define __PredictedObject_hpp__

#include <lcm/lcm_coretypes.h>

#include <vector>


class PredictedObject
{
    public:
        int16_t    id;

        uint8_t    type;

        /// car=0;bicyclist=1;pedestrian=2;unknown=127;
        float      velocity;

        float      accelerate;

        float      heading;

        float      width;

        float      length;

        float      bounding_box[2][4];

        /// [2][0]:left_up;[2][1]:left_bottom;[2][2]:right_up;[2][3]:right_bottom;
        int8_t     trajectory_point_num;

        /// current+length of prediction sequence;
        std::vector< std::vector< float > > trajectory_point;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "PredictedObject"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int PredictedObject::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int PredictedObject::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int PredictedObject::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t PredictedObject::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* PredictedObject::getTypeName()
{
    return "PredictedObject";
}

int PredictedObject::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->id, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->type, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->velocity, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->accelerate, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->heading, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->width, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 2; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->bounding_box[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->trajectory_point_num, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->trajectory_point_num > 0) {
        for (int a0 = 0; a0 < 2; a0++) {
            tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->trajectory_point[a0][0], this->trajectory_point_num);
            if(tlen < 0) return tlen; else pos += tlen;
        }
    }

    return pos;
}

int PredictedObject::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->id, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->type, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->velocity, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->accelerate, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->heading, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->width, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->length, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 2; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->bounding_box[a0][0], 4);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->trajectory_point_num, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->trajectory_point.resize(2);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < 2; a0++) {
        if(this->trajectory_point_num) {
            this->trajectory_point[a0].resize(this->trajectory_point_num);
            tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->trajectory_point[a0][0], this->trajectory_point_num);
            if(tlen < 0) return tlen; else pos += tlen;
        }
    }

    return pos;
}

int PredictedObject::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __byte_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += 2 * __float_encoded_array_size(NULL, 4);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += 2 * __float_encoded_array_size(NULL, this->trajectory_point_num);
    return enc_size;
}

uint64_t PredictedObject::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0x999ad7d191d9d729LL;
    return (hash<<1) + ((hash>>63)&1);
}

#endif
