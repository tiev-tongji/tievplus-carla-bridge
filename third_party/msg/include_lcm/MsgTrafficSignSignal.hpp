/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#ifndef __MsgTrafficSignSignal_hpp__
#define __MsgTrafficSignSignal_hpp__

#include <lcm/lcm_coretypes.h>

#include <vector>
#include "TrafficSign.hpp"


class MsgTrafficSignSignal
{
    public:
        int64_t    timestamp;

        int8_t     num;

        /// the number of the traffic sign.
        std::vector< TrafficSign > traffic_sign_list;

    public:
        /// the list of the traffic sign.
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit5 = 0x01;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit10 = 0x02;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit15 = 0x03;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit20 = 0x04;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit25 = 0x05;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit30 = 0x06;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit35 = 0x07;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit40 = 0x08;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit50 = 0x09;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit60 = 0x0A;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit65 = 0x0B;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit70 = 0x0C;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit80 = 0x0D;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit90 = 0x0E;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit100 = 0x0F;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit110 = 0x10;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   SpeedLimit120 = 0x11;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   Stop = 0x12;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   RigthGuide = 0x13;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   LeftGuide = 0x14;
        // If you're using C++11 and are getting compiler errors saying
        // things like â€˜constexprâ€?needed for in-class initialization of
        // static data member then re-run lcm-gen with '--cpp-std=c++11'
        // to generate code that is compliant with C++11
        static const int8_t   Tripod = 0x15;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "MsgTrafficSignSignal"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int MsgTrafficSignSignal::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int MsgTrafficSignSignal::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int MsgTrafficSignSignal::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t MsgTrafficSignSignal::getHash()
{
    static int64_t hash = static_cast<int64_t>(_computeHash(NULL));
    return hash;
}

const char* MsgTrafficSignSignal::getTypeName()
{
    return "MsgTrafficSignSignal";
}

int MsgTrafficSignSignal::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->num, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num; a0++) {
        tlen = this->traffic_sign_list[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int MsgTrafficSignSignal::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->num, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    try {
        this->traffic_sign_list.resize(this->num);
    } catch (...) {
        return -1;
    }
    for (int a0 = 0; a0 < this->num; a0++) {
        tlen = this->traffic_sign_list[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int MsgTrafficSignSignal::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num; a0++) {
        enc_size += this->traffic_sign_list[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

uint64_t MsgTrafficSignSignal::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == MsgTrafficSignSignal::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, MsgTrafficSignSignal::getHash };

    uint64_t hash = 0x4c67dea5467b71c7LL +
         TrafficSign::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
